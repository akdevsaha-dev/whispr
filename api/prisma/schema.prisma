generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  username       String
  email          String        @unique
  passwordHash   String
  profilePicture String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastSeen       DateTime?
  status         String?       @default("offline")
  messages       Message[]     @relation("SentMessages")
  chats          Chat[]        @relation("ChatParticipants")
  groupMembers   GroupMember[] @relation("UserGroupMembers")
  settings       UserSettings?
  readReceipts   ReadReceipt[] @relation("UserReadReceipts")
  contacts       Contact[]     @relation("OwnerContacts")
  addedBy        Contact[]     @relation("AddedContacts")
}

model Chat {
  id            String        @id @default(uuid())
  isGroupChat   Boolean       @default(false)
  name          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  participants  User[]        @relation("ChatParticipants")
  messages      Message[]
  groupMembers  GroupMember[] @relation("ChatGroupMembers")
  lastMessageId String?       @unique
  lastMessage   Message?      @relation("LastMessage", fields: [lastMessageId], references: [id], onDelete: SetNull)
}

model GroupMember {
  id       String   @id @default(uuid())
  userId   String
  chatId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  user     User     @relation("UserGroupMembers", fields: [userId], references: [id], onDelete: Cascade)
  chat     Chat     @relation("ChatGroupMembers", fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
}

model Message {
  id                String        @id @default(uuid())
  chatId            String
  senderId          String
  content           String
  contentType       String        @default("text")
  sentAt            DateTime      @default(now())
  editedAt          DateTime?
  isEdited          Boolean       @default(false)
  status            String        @default("sent")
  replyToId         String?
  chat              Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender            User          @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  replyTo           Message?      @relation("Replies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies           Message[]     @relation("Replies")
  readReceipts      ReadReceipt[]
  lastMessageInChat Chat?         @relation("LastMessage")
}

model ReadReceipt {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation("UserReadReceipts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
}

model UserSettings {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications   Boolean  @default(true)
  privacySettings Json?
  updatedAt       DateTime @updatedAt
}

model Contact {
  id        String   @default(uuid())
  ownerId   String
  contactId String
  addedAt   DateTime @default(now())
  owner     User     @relation("OwnerContacts", fields: [ownerId], references: [id])
  contact   User     @relation("AddedContacts", fields: [contactId], references: [id])
  userId    String

  @@unique([ownerId, contactId])
}
